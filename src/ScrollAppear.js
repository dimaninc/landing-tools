// Generated by CoffeeScript 1.12.7
var ScrollAppear;

ScrollAppear = (function() {
  function ScrollAppear(options) {
    this.window = $(window);
    this.options = $.extend({
      selector: '[data-scroll-appear]',
      selectorSuffixForNonAppeared: null,
      onFinish: null,
      windowHeightFactor: 1.5,
      delayAttr: 'data-appear-delay',
      eventClass: '.scrollappear',
      transitionTime: 500
    }, options);
    this.count = this.getElements().length;
    this.countLoaded = 0;
    this.cssClasses = {};
    this.setupDelays().go();
    setTimeout((function(_this) {
      return function() {
        return _this.worker();
      };
    })(this), 10);
  }

  ScrollAppear.prototype.setupDelays = function() {
    var self, styles;
    self = this;
    $('[' + this.options.delayAttr + ']').each(function() {
      var $e;
      $e = $(this);
      $e.addClass(self.getDelayCssClassName($e));
      return true;
    });
    styles = $.map(this.cssClasses, function(value, className) {
      return "." + className + "{" + value + "!important}";
    });
    $('head').append('<style type="text/css">' + styles.join('\n') + '</style>');
    return this;
  };

  ScrollAppear.prototype.getElementDelay = function($e) {
    return this.parseDelay($e.attr(this.options.delayAttr));
  };

  ScrollAppear.prototype.parseDelay = function(delay) {
    if (!delay) {
      return 0;
    }
    if (delay.slice(-2) === 'ms') {
      delay = parseInt(delay);
    } else {
      delay = 1000 * parseFloat('0' + delay);
    }
    return delay;
  };

  ScrollAppear.prototype.getDelayCssClassName = function($e) {
    var delay, name, value;
    delay = this.getElementDelay($e);
    name = 'sa--td-' + delay;
    if (delay && !this.cssClasses[name]) {
      value = delay + 'ms !important;';
      this.cssClasses[name] = '-webkit-transition-delay:' + value + '-moz-transition-delay:' + value + 'transition-delay:' + value;
    }
    return name;
  };

  ScrollAppear.prototype.go = function() {
    this.window.on('scroll' + this.options.eventClass, (function(_this) {
      return function() {
        return _this.worker();
      };
    })(this));
    return this;
  };

  ScrollAppear.prototype.getSuffix = function() {
    if (!this.options.selectorSuffixForNonAppeared && typeof this.options.onFinish === 'string') {
      return ':not(' + this.options.onFinish + ')';
    } else {
      return this.options.selectorSuffixForNonAppeared || '';
    }
  };

  ScrollAppear.prototype.getFullSelector = function() {
    return this.options.selector + this.getSuffix();
  };

  ScrollAppear.prototype.getElements = function() {
    return $(this.getFullSelector());
  };

  ScrollAppear.prototype.finishElement = function($wrapper) {
    var defaultFinish, finish, self;
    self = this;
    defaultFinish = function($el) {
      return $el.attr('data-scroll-appeared', 'true').data('scroll-appeared', true);
    };
    if (typeof this.options.onFinish === 'string') {
      $wrapper.addClass(this.options.onFinish);
    } else {
      finish = this.options.onFinish || defaultFinish;
      finish($wrapper);
    }
    $wrapper.find('[' + this.options.delayAttr + ']').each(function() {
      var $e, className, delay;
      $e = $(this);
      delay = self.getElementDelay($e);
      className = self.getDelayCssClassName($e);
      return setTimeout((function(_this) {
        return function() {
          return $e.removeClass(className);
        };
      })(this), delay + self.options.transitionTime + 10);
    });
    return this;
  };

  ScrollAppear.prototype.stepDone = function() {
    this.countLoaded++;
    if (this.countLoaded === this.count) {
      this.finish();
    }
    return this;
  };

  ScrollAppear.prototype.finish = function() {
    this.window.off(this.options.eventClass);
    return this;
  };

  ScrollAppear.prototype.worker = function() {
    var scrollBreakPoint, self;
    self = this;
    scrollBreakPoint = this.window.scrollTop() + this.window.height() / this.options.windowHeightFactor;
    this.getElements().each(function() {
      var $wrapper;
      $wrapper = $(this);
      if (scrollBreakPoint >= $wrapper.offset().top) {
        self.finishElement($wrapper);
        return self.stepDone();
      }
    });
    return this;
  };

  return ScrollAppear;

})();

//# sourceMappingURL=ScrollAppear.js.map
